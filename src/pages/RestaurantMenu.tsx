import { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import Icon from '@/components/ui/icon';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

interface MenuItem {
  id: number;
  name: string;
  description: string;
  price: number;
  category: string;
  image: string;
  isPopular?: boolean;
  isSpicy?: boolean;
}

interface Restaurant {
  id: number;
  name: string;
  cuisine: string;
  rating: number;
  deliveryTime: string;
  priceRange: string;
  image: string;
  description: string;
  address: string;
  phone: string;
  menu: MenuItem[];
}

const mockRestaurantsData: Record<string, Restaurant> = {
  '1': {
    id: 1,
    name: 'Italiano Vero',
    cuisine: '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è',
    rating: 4.8,
    deliveryTime: '25-35 –º–∏–Ω',
    priceRange: '‚ÇΩ‚ÇΩ‚ÇΩ',
    image: 'üçï',
    description: '–ê—É—Ç–µ–Ω—Ç–∏—á–Ω–∞—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤',
    address: '—É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 10',
    phone: '+7 (495) 123-45-67',
    menu: [
      {
        id: 1,
        name: '–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞',
        description: '–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –±–∞–∑–∏–ª–∏–∫, –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ',
        price: 650,
        category: '–ü–∏—Ü—Ü—ã',
        image: 'üçï',
        isPopular: true,
      },
      {
        id: 2,
        name: '–ü–∏—Ü—Ü–∞ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏',
        description: '–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –ø–µ–ø–ø–µ—Ä–æ–Ω–∏, –æ—Ä–µ–≥–∞–Ω–æ',
        price: 750,
        category: '–ü–∏—Ü—Ü—ã',
        image: 'üçï',
        isPopular: true,
        isSpicy: true,
      },
      {
        id: 3,
        name: '–ö–∞—Ä–±–æ–Ω–∞—Ä–∞',
        description: '–ü–∞—Å—Ç–∞, –±–µ–∫–æ–Ω, —è–π—Ü–æ, –ø–∞—Ä–º–µ–∑–∞–Ω, —á–µ—Ä–Ω—ã–π –ø–µ—Ä–µ—Ü',
        price: 550,
        category: '–ü–∞—Å—Ç–∞',
        image: 'üçù',
        isPopular: true,
      },
      {
        id: 4,
        name: '–ë–æ–ª–æ–Ω—å–µ–∑–µ',
        description: '–ü–∞—Å—Ç–∞, –º—è—Å–Ω–æ–π —Å–æ—É—Å, –ø–∞—Ä–º–µ–∑–∞–Ω, –±–∞–∑–∏–ª–∏–∫',
        price: 520,
        category: '–ü–∞—Å—Ç–∞',
        image: 'üçù',
      },
      {
        id: 5,
        name: '–¢–∏—Ä–∞–º–∏—Å—É',
        description: '–°–∞–≤–æ—è—Ä–¥–∏, –º–∞—Å–∫–∞—Ä–ø–æ–Ω–µ, –∫–æ—Ñ–µ, –∫–∞–∫–∞–æ',
        price: 350,
        category: '–î–µ—Å–µ—Ä—Ç—ã',
        image: 'üç∞',
        isPopular: true,
      },
      {
        id: 6,
        name: '–ü–∞–Ω–Ω–∞ –∫–æ—Ç—Ç–∞',
        description: '–°–ª–∏–≤–∫–∏, –≤–∞–Ω–∏–ª—å, —è–≥–æ–¥–Ω—ã–π —Å–æ—É—Å',
        price: 320,
        category: '–î–µ—Å–µ—Ä—Ç—ã',
        image: 'üçÆ',
      },
    ],
  },
  '2': {
    id: 2,
    name: '–°—É—à–∏ –ú–∞—Å—Ç–µ—Ä',
    cuisine: '–Ø–ø–æ–Ω—Å–∫–∞—è',
    rating: 4.9,
    deliveryTime: '30-40 –º–∏–Ω',
    priceRange: '‚ÇΩ‚ÇΩ‚ÇΩ‚ÇΩ',
    image: 'üç£',
    description: '–ü—Ä–µ–º–∏—É–º —è–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è –æ—Ç —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞ –∏–∑ –¢–æ–∫–∏–æ',
    address: '–ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –¥. 25',
    phone: '+7 (812) 987-65-43',
    menu: [
      {
        id: 1,
        name: '–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è',
        description: '–õ–æ—Å–æ—Å—å, —Å–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä, –æ–≥—É—Ä–µ—Ü, –Ω–æ—Ä–∏, —Ä–∏—Å',
        price: 890,
        category: '–†–æ–ª–ª—ã',
        image: 'üç£',
        isPopular: true,
      },
      {
        id: 2,
        name: '–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è',
        description: '–ö—Ä–∞–±, –∞–≤–æ–∫–∞–¥–æ, –æ–≥—É—Ä–µ—Ü, –∏–∫—Ä–∞ —Ç–æ–±–∏–∫–æ, –º–∞–π–æ–Ω–µ–∑',
        price: 850,
        category: '–†–æ–ª–ª—ã',
        image: 'üç£',
        isPopular: true,
      },
      {
        id: 3,
        name: '–°–∞—à–∏–º–∏ —Å–µ—Ç',
        description: '–õ–æ—Å–æ—Å—å, —Ç—É–Ω–µ—Ü, —É–≥–æ—Ä—å - –ø–æ 3 –∫—É—Å–æ—á–∫–∞',
        price: 1250,
        category: '–°–∞—à–∏–º–∏',
        image: 'üç±',
        isPopular: true,
      },
      {
        id: 4,
        name: '–ù–∏–≥–∏—Ä–∏ —Å–µ—Ç',
        description: '–ê—Å—Å–æ—Ä—Ç–∏ –Ω–∏–≥–∏—Ä–∏: –ª–æ—Å–æ—Å—å, —Ç—É–Ω–µ—Ü, –∫—Ä–µ–≤–µ—Ç–∫–∞, —É–≥–æ—Ä—å',
        price: 980,
        category: '–°—É—à–∏',
        image: 'üç£',
      },
      {
        id: 5,
        name: '–†–∞–º–µ–Ω',
        description: '–°–≤–∏–Ω–æ–π –±—É–ª—å–æ–Ω, –ª–∞–ø—à–∞, —è–π—Ü–æ, —Å–≤–∏–Ω–∏–Ω–∞ —á–∞—à—É',
        price: 650,
        category: '–ì–æ—Ä—è—á–µ–µ',
        image: 'üçú',
        isPopular: true,
      },
      {
        id: 6,
        name: '–ú–æ—Ç–∏',
        description: '–†–∏—Å–æ–≤—ã–µ –ø–∏—Ä–æ–∂–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—á–∏–Ω–∫–∞–º–∏',
        price: 420,
        category: '–î–µ—Å–µ—Ä—Ç—ã',
        image: 'üç°',
      },
    ],
  },
};

const RestaurantMenu = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const restaurant = mockRestaurantsData[id || '1'];

  const [selectedCategory, setSelectedCategory] = useState('all');
  const [cart, setCart] = useState<Record<number, number>>({});

  if (!restaurant) {
    navigate('/');
    return null;
  }

  const categories = ['all', ...Array.from(new Set(restaurant.menu.map(item => item.category)))];

  const filteredMenu = selectedCategory === 'all' 
    ? restaurant.menu 
    : restaurant.menu.filter(item => item.category === selectedCategory);

  const addToCart = (itemId: number) => {
    setCart(prev => ({
      ...prev,
      [itemId]: (prev[itemId] || 0) + 1
    }));
  };

  const removeFromCart = (itemId: number) => {
    setCart(prev => {
      const newCart = { ...prev };
      if (newCart[itemId] > 1) {
        newCart[itemId]--;
      } else {
        delete newCart[itemId];
      }
      return newCart;
    });
  };

  const totalItems = Object.values(cart).reduce((sum, count) => sum + count, 0);
  const totalPrice = Object.entries(cart).reduce((sum, [itemId, count]) => {
    const item = restaurant.menu.find(m => m.id === parseInt(itemId));
    return sum + (item?.price || 0) * count;
  }, 0);

  const handleCheckout = () => {
    const cartItems = Object.entries(cart).map(([itemId, quantity]) => {
      const item = restaurant.menu.find(m => m.id === parseInt(itemId));
      return {
        id: parseInt(itemId),
        name: item?.name || '',
        price: item?.price || 0,
        quantity,
        image: item?.image || '',
      };
    });

    navigate('/checkout', {
      state: {
        items: cartItems,
        restaurantName: restaurant.name,
        subtotal: totalPrice,
      },
    });
  };

  return (
    <div className="min-h-screen bg-background pb-24">
      <header className="sticky top-0 z-50 bg-white border-b border-border shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center gap-4">
            <Button 
              variant="ghost" 
              size="icon" 
              onClick={() => navigate('/')}
              className="rounded-full"
            >
              <Icon name="ArrowLeft" size={20} />
            </Button>
            <div className="flex-1">
              <h1 className="text-xl font-bold text-foreground">{restaurant.name}</h1>
              <div className="flex items-center gap-3 mt-1">
                <div className="flex items-center gap-1 text-sm">
                  <Icon name="Star" size={14} className="fill-primary text-primary" />
                  <span className="font-medium">{restaurant.rating}</span>
                </div>
                <span className="text-sm text-muted-foreground">{restaurant.deliveryTime}</span>
                <Badge variant="outline" className="text-xs">{restaurant.cuisine}</Badge>
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="relative bg-gradient-to-br from-primary/10 to-primary/5 py-12">
        <div className="container mx-auto px-4">
          <div className="flex items-center justify-center mb-4">
            <span className="text-8xl">{restaurant.image}</span>
          </div>
          <p className="text-center text-muted-foreground max-w-2xl mx-auto">
            {restaurant.description}
          </p>
          <div className="flex items-center justify-center gap-6 mt-4 text-sm text-muted-foreground">
            <div className="flex items-center gap-2">
              <Icon name="MapPin" size={16} />
              <span>{restaurant.address}</span>
            </div>
            <div className="flex items-center gap-2">
              <Icon name="Phone" size={16} />
              <span>{restaurant.phone}</span>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-6">
        <Tabs value={selectedCategory} onValueChange={setSelectedCategory} className="w-full">
          <TabsList className="w-full justify-start overflow-x-auto mb-6 bg-secondary/50 p-1 rounded-xl">
            {categories.map((category) => (
              <TabsTrigger 
                key={category} 
                value={category}
                className="rounded-lg data-[state=active]:bg-white data-[state=active]:shadow-sm"
              >
                {category === 'all' ? '–í—Å–µ' : category}
              </TabsTrigger>
            ))}
          </TabsList>

          <TabsContent value={selectedCategory} className="mt-0">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {filteredMenu.map((item, index) => (
                <Card 
                  key={item.id}
                  className="group hover:shadow-lg transition-all duration-300 rounded-2xl overflow-hidden animate-fade-in"
                  style={{ animationDelay: `${index * 50}ms` }}
                >
                  <CardContent className="p-0">
                    <div className="flex gap-4 p-4">
                      <div className="relative bg-gradient-to-br from-primary/10 to-primary/5 w-24 h-24 rounded-xl flex items-center justify-center flex-shrink-0">
                        <span className="text-4xl group-hover:scale-110 transition-transform duration-300">
                          {item.image}
                        </span>
                        {item.isPopular && (
                          <Badge className="absolute -top-2 -right-2 bg-primary text-primary-foreground text-xs px-2">
                            ‚≠ê –•–∏—Ç
                          </Badge>
                        )}
                      </div>

                      <div className="flex-1 min-w-0">
                        <div className="flex items-start justify-between mb-1">
                          <h3 className="font-semibold text-foreground leading-tight">
                            {item.name}
                          </h3>
                          {item.isSpicy && (
                            <span className="text-lg ml-2">üå∂Ô∏è</span>
                          )}
                        </div>
                        
                        <p className="text-sm text-muted-foreground mb-3 line-clamp-2">
                          {item.description}
                        </p>

                        <div className="flex items-center justify-between">
                          <span className="text-lg font-bold text-foreground">
                            {item.price} ‚ÇΩ
                          </span>

                          {cart[item.id] ? (
                            <div className="flex items-center gap-2 bg-primary/10 rounded-lg px-2 py-1">
                              <Button
                                size="icon"
                                variant="ghost"
                                className="h-7 w-7 rounded-md"
                                onClick={() => removeFromCart(item.id)}
                              >
                                <Icon name="Minus" size={14} />
                              </Button>
                              <span className="font-semibold min-w-[20px] text-center">
                                {cart[item.id]}
                              </span>
                              <Button
                                size="icon"
                                variant="ghost"
                                className="h-7 w-7 rounded-md"
                                onClick={() => addToCart(item.id)}
                              >
                                <Icon name="Plus" size={14} />
                              </Button>
                            </div>
                          ) : (
                            <Button
                              size="sm"
                              className="rounded-lg"
                              onClick={() => addToCart(item.id)}
                            >
                              <Icon name="Plus" size={16} className="mr-1" />
                              –í –∫–æ—Ä–∑–∏–Ω—É
                            </Button>
                          )}
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>
      </div>

      {totalItems > 0 && (
        <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-border shadow-2xl z-50 animate-fade-in">
          <div className="container mx-auto px-4 py-4">
            <div className="flex items-center justify-between gap-4">
              <div className="flex-1">
                <div className="text-sm text-muted-foreground">
                  {totalItems} {totalItems === 1 ? '—Ç–æ–≤–∞—Ä' : totalItems < 5 ? '—Ç–æ–≤–∞—Ä–∞' : '—Ç–æ–≤–∞—Ä–æ–≤'}
                </div>
                <div className="text-2xl font-bold text-foreground">
                  {totalPrice} ‚ÇΩ
                </div>
              </div>
              <Button size="lg" className="rounded-xl px-8" onClick={handleCheckout}>
                <Icon name="ShoppingCart" size={20} className="mr-2" />
                –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default RestaurantMenu;